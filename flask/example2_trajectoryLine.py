import cv2
import numpy as np

movement_history = [(2310.0, 1326.0), (1922.0, 941.0), (1930.0, 941.0), (1154.0, 942.0), (1162.0, 1326.0), (1156.0, 1327.0), (1157.0, 1326.0), (770.0, 937.0), (771.0, 1322.0), (773.0, 1322.0), (777.0, 943.0), (393.0, 749.0), (387.0, 1065.0), (394.0, 1069.0), (772.0, 938.0), (389.0, 753.0), (388.0, 1071.0), (1162.0, 937.0), (772.0, 937.0), (1161.0, 1324.0), (1539.0, 941.0), (1543.0, 940.0), (1546.0, 942.0), (1546.0, 558.0), (1546.0, 554.0), (1542.0, 942.0), (1538.0, 553.0), (1545.0, 558.0), (1545.0, 937.0), (1539.0, 938.0), (2690.0, 556.0), (2694.0, 560.0), (2690.0, 561.0), (2693.0, 554.0), (2692.0, 556.0), (2693.0, 171.0), (2690.0, 170.0), (3076.0, 176.0), (3464.0, 172.0), (3465.0, 173.0), (3461.0, 173.0), (3464.0, 174.0), (3076.0, 169.0), (3076.0, 218.0), (3459.0, 177.0), (3074.0, 173.0), (1924.0, 218.0), (1154.0, 218.0), (1544.0, 219.0), (1154.0, 219.0), (1544.0, 224.0), (1538.0, 221.0), (1546.0, 224.0), (1542.0, 225.0), (1538.0, 174.0), (1158.0, 219.0), (1159.0, 173.0), (2693.0, 558.0), (2313.0, 554.0), (2306.0, 553.0), (2306.0, 560.0), (2312.0, 560.0), (2314.0, 561.0), (2691.0, 940.0), (2690.0, 944.0), (2692.0, 943.0), (2697.0, 943.0), (3076.0, 938.0), (3082.0, 937.0), (2695.0, 940.0), (2691.0, 940.0), (2692.0, 937.0), (2691.0, 942.0), (3074.0, 943.0), (2690.0, 942.0), (3463.0, 169.0), (3460.0, 176.0), (3463.0, 175.0), (3463.0, 177.0), (3458.0, 169.0), (3462.0, 173.0), (3460.0, 176.0), (3082.0, 177.0), (1928.0, 177.0), (1925.0, 173.0), (1929.0, 169.0), (1538.0, 173.0), (1542.0, 174.0), (1546.0, 170.0), (1538.0, 172.0), (1160.0, 175.0), (1156.0, 175.0), (1545.0, 172.0), (774.0, 170.0), (773.0, 169.0), (778.0, 177.0), (773.0, 169.0), (394.0, 110.0), (773.0, 941.0), (1154.0, 1326.0), (1158.0, 1710.0), (1158.0, 1327.0), (1160.0, 1326.0), (770.0, 1327.0), (1156.0, 1328.0), (1162.0, 1328.0), (1161.0, 1707.0), (1157.0, 1713.0), (1159.0, 1325.0), (1539.0, 1324.0), (1157.0, 1326.0), (1154.0, 1713.0), (1161.0, 1710.0), (1923.0, 1326.0), (2306.0, 1326.0), (2314.0, 1323.0), (2309.0, 1325.0), (2309.0, 1322.0), (2696.0, 938.0), (2695.0, 942.0), (2698.0, 938.0), (2694.0, 941.0), (2694.0, 557.0), (2693.0, 942.0), (2697.0, 938.0), (2690.0, 944.0), (2690.0, 945.0), (2698.0, 559.0), (2310.0, 556.0), (2310.0, 554.0), (2310.0, 177.0), (2309.0, 173.0), (2306.0, 556.0), (2311.0, 555.0), (2309.0, 561.0), (1155.0, 170.0), (1156.0, 169.0), (1159.0, 176.0), (1159.0, 176.0), (1157.0, 170.0), (1162.0, 174.0), (1155.0, 176.0), (770.0, 176.0), (392.0, 112.0), (386.0, 106.0), (389.0, 112.0), (392.0, 110.0), (389.0, 105.0), (388.0, 427.0), (391.0, 432.0), (1540.0, 556.0), (1544.0, 554.0), (2310.0, 937.0), (1929.0, 941.0), (2310.0, 1326.0), (1922.0, 945.0), (1928.0, 940.0), (1928.0, 943.0), (1924.0, 1321.0), (1924.0, 1328.0), (1540.0, 1326.0), (1924.0, 1329.0), (1928.0, 1327.0), (2691.0, 940.0), (3081.0, 937.0), (3462.0, 945.0), (3462.0, 555.0), (3460.0, 943.0), (3460.0, 940.0), (3459.0, 941.0), (3460.0, 561.0), (3465.0, 944.0), (3460.0, 941.0), (3074.0, 942.0), (1926.0, 558.0), (1160.0, 559.0), (1156.0, 561.0), (1157.0, 558.0), (1543.0, 559.0), (1158.0, 553.0), (1539.0, 557.0), (1541.0, 556.0), (1154.0, 172.0), (1162.0, 170.0), (1154.0, 177.0), (1160.0, 561.0), (1162.0, 561.0), (772.0, 560.0), (392.0, 426.0), (776.0, 561.0), (394.0, 425.0), (393.0, 430.0), (391.0, 110.0), (393.0, 429.0), (388.0, 751.0), (389.0, 426.0), (771.0, 559.0), (390.0, 427.0), (393.0, 426.0), (391.0, 747.0), (772.0, 554.0), (770.0, 554.0), (394.0, 426.0), (389.0, 433.0), (1159.0, 944.0), (1157.0, 939.0), (2306.0, 937.0), (2698.0, 1322.0), (2694.0, 1323.0), (2691.0, 1323.0), (3082.0, 937.0), (2698.0, 1325.0), (2695.0, 1323.0), (2691.0, 1323.0), (3079.0, 1327.0), (3076.0, 1329.0), (3464.0, 1328.0), (3848.0, 1325.0), (3850.0, 1329.0), (3845.0, 937.0), (3845.0, 940.0), (3842.0, 1327.0), (3845.0, 938.0), (3844.0, 554.0), (4229.0, 559.0), (3847.0, 557.0), (4234.0, 938.0), (4228.0, 561.0), (2314.0, 555.0), (2313.0, 557.0), (2312.0, 557.0), (2306.0, 174.0), (2310.0, 554.0), (2311.0, 553.0), (2306.0, 557.0), (2310.0, 556.0), (2310.0, 557.0), (2306.0, 173.0), (1543.0, 558.0), (1160.0, 560.0), (1156.0, 559.0), (1159.0, 556.0), (773.0, 556.0), (774.0, 559.0), (1155.0, 941.0), (778.0, 940.0), (776.0, 554.0), (772.0, 558.0), (777.0, 942.0), (776.0, 942.0), (770.0, 557.0), (774.0, 941.0), (773.0, 943.0), (774.0, 939.0), (770.0, 561.0), (775.0, 938.0), (1155.0, 560.0), (773.0, 938.0), (1160.0, 941.0), (2693.0, 938.0), (3458.0, 1329.0), (3466.0, 1323.0), (3459.0, 1328.0), (3464.0, 1321.0), (3459.0, 1326.0), (3849.0, 1710.0), (3464.0, 1708.0), (2694.0, 1711.0), (2693.0, 1709.0), (2696.0, 1705.0), (2692.0, 2481.0)]
minX = 99999
minY = 99999
maxX = -9999
maxY = -9999
for frame in movement_history:
    minX = min(frame[0], minX)
    minY = min(frame[1], minY)
    maxX = max(frame[0], maxX)
    maxY = max(frame[1], maxY)

print(minX, minY, maxX, maxY)

disp_x = (maxX - minX) // 1920
disp_y = (maxY - minY) // 1080

# print(disp_x, disp_y)

"""Prepare"""
background = cv2.imread('./sample_data/screen.jpg')
trajectory_points = []
heatmap = np.zeros_like(background[:, :, 0], np.float32)
print(heatmap.shape)
image = background.copy()
"""Create Annotated Frame"""
for idx, frame in enumerate(movement_history):
    x = frame[0] // disp_x
    y = frame[1] // disp_y
    if x > 1920:
        x = 1900
    if y > 1080:
        y = 1060
    # print(x, y)
    x, y = int(x), int(y)
    trajectory_points.append((int(x), int(y))) # add it to trajectory
    heatmap[y, x] += 1

    """Draw Circle"""
    image = cv2.circle(background, (int(x), int(y)), radius=5, color=(20, 255, 20), thickness=-1) 
    """Draw trajectory"""
    if len(trajectory_points) > 1:
        for j in range(1, len(trajectory_points)):
            color = max(0, 255 - j * 10)  # This will make the color fade over time
            image = cv2.line(image, trajectory_points[j - 1], trajectory_points[j], (0, 0, color), thickness=1)
    
    
    # Normalize the blurred heatmap to 8-bit range
    cv2.imwrite(f'./sample_data/trajectorytracks/{idx}.jpg', image)



"""Read and save as Video"""
import cv2

# Path to the directory containing your image files
image_dir = './sample_data/trajectorytracks/'

# Get the list of image files in the directory
image_files = [image_dir + str(i) + '.jpg' for i in range(idx)]

# Specify the output video file name
output_video_path = './sample_data/output_video1.avi'

# # Get the first image to initialize the video writer
first_image = cv2.imread(image_files[0])
height, width, layers = first_image.shape
fourcc = cv2.VideoWriter_fourcc(*'XVID')  # You can use other codecs like 'MJPG' or 'MP4V'
video_writer = cv2.VideoWriter(output_video_path, fourcc, 30, (width, height))

# Loop through the image files and write each frame to the video
for image_file in image_files:
    frame = cv2.imread(image_file)
    video_writer.write(frame)

# Release the video writer
video_writer.release()

print(f"Video saved to: {output_video_path}")


